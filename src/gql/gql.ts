/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query selectedProjectsCollection {\n  selectedProjectsCollection(limit: 1) {\n    items {\n      sys {\n        id\n      }\n      projectsCollection {\n        items {\n          sys {\n            id\n          }\n          title\n          previewsCollection {\n            items {\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery collectionCollection {\n  collectionCollection {\n    items {\n      sys {\n        id\n      }\n    }\n  }\n}\n\nquery collectionEntry($id: String!) {\n  collection(id: $id) {\n    sys {\n      id\n    }\n    title\n    previewsCollection {\n      items {\n        url\n        width\n        height\n      }\n    }\n    photosCollection {\n      items {\n        url\n        width\n        height\n      }\n    }\n  }\n}\n\nquery pageImprint {\n  pageCollection(where: {slug: \"imprint\"}, limit: 1) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          assets {\n            hyperlink {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n            block {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery pagePortfolio {\n  pageCollection(where: {slug: \"portfolio\"}, limit: 1) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          assets {\n            hyperlink {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n            block {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.SelectedProjectsCollectionDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query selectedProjectsCollection {\n  selectedProjectsCollection(limit: 1) {\n    items {\n      sys {\n        id\n      }\n      projectsCollection {\n        items {\n          sys {\n            id\n          }\n          title\n          previewsCollection {\n            items {\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery collectionCollection {\n  collectionCollection {\n    items {\n      sys {\n        id\n      }\n    }\n  }\n}\n\nquery collectionEntry($id: String!) {\n  collection(id: $id) {\n    sys {\n      id\n    }\n    title\n    previewsCollection {\n      items {\n        url\n        width\n        height\n      }\n    }\n    photosCollection {\n      items {\n        url\n        width\n        height\n      }\n    }\n  }\n}\n\nquery pageImprint {\n  pageCollection(where: {slug: \"imprint\"}, limit: 1) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          assets {\n            hyperlink {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n            block {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery pagePortfolio {\n  pageCollection(where: {slug: \"portfolio\"}, limit: 1) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          assets {\n            hyperlink {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n            block {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query selectedProjectsCollection {\n  selectedProjectsCollection(limit: 1) {\n    items {\n      sys {\n        id\n      }\n      projectsCollection {\n        items {\n          sys {\n            id\n          }\n          title\n          previewsCollection {\n            items {\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery collectionCollection {\n  collectionCollection {\n    items {\n      sys {\n        id\n      }\n    }\n  }\n}\n\nquery collectionEntry($id: String!) {\n  collection(id: $id) {\n    sys {\n      id\n    }\n    title\n    previewsCollection {\n      items {\n        url\n        width\n        height\n      }\n    }\n    photosCollection {\n      items {\n        url\n        width\n        height\n      }\n    }\n  }\n}\n\nquery pageImprint {\n  pageCollection(where: {slug: \"imprint\"}, limit: 1) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          assets {\n            hyperlink {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n            block {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery pagePortfolio {\n  pageCollection(where: {slug: \"portfolio\"}, limit: 1) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          assets {\n            hyperlink {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n            block {\n              sys {\n                id\n              }\n              title\n              description\n              contentType\n              fileName\n              size\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;